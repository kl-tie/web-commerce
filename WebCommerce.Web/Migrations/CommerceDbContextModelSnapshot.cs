// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebCommerce.Web.Web.Entities;

#nullable disable

namespace WebCommerce.Web.Web.Migrations
{
    [DbContext(typeof(CommerceDbContext))]
    partial class CommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.AuditTrailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.HasKey("Id")
                        .HasName("audit_trail_logs_pk");

                    b.ToTable("audit_trail_logs", (string)null);
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.CartItem", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_account_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.HasKey("UserAccountId", "ProductId")
                        .HasName("cart_items_pk");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_cart_items_product_id");

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Store product ID as primary key.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Store the created date & time of the data.");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'system'::text")
                        .HasComment("Store the name of who created the data.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasDefaultValueSql("'system'::text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("products_pk");

                    b.ToTable("products", null, t =>
                        {
                            t.HasComment("Store the product list for sale.");
                        });
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'system'::text");

                    b.Property<Guid?>("UserAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("receipts_pk");

                    b.HasIndex("UserAccountId")
                        .HasDatabaseName("ix_receipts_user_account_id");

                    b.ToTable("receipts", (string)null);
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.ReceiptDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_id");

                    b.HasKey("Id")
                        .HasName("receipt_details_pk");

                    b.HasIndex("ReceiptId")
                        .HasDatabaseName("ix_receipt_details_receipt_id");

                    b.ToTable("receipt_details", (string)null);
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'system'::text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasDefaultValueSql("'system'::text");

                    b.HasKey("Id")
                        .HasName("user_accounts_pk");

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.CartItem", b =>
                {
                    b.HasOne("WebCommerce.Web.Web.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("cart_items__products_fk");

                    b.HasOne("WebCommerce.Web.Web.Entities.UserAccount", "UserAccount")
                        .WithMany("CartItems")
                        .HasForeignKey("UserAccountId")
                        .IsRequired()
                        .HasConstraintName("cart_items__user_accounts");

                    b.Navigation("Product");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.Receipt", b =>
                {
                    b.HasOne("WebCommerce.Web.Web.Entities.UserAccount", "UserAccount")
                        .WithMany("Receipts")
                        .HasForeignKey("UserAccountId")
                        .HasConstraintName("receipts__account_id_fk");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.ReceiptDetail", b =>
                {
                    b.HasOne("WebCommerce.Web.Web.Entities.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .IsRequired()
                        .HasConstraintName("receipt_details__receipts_fk");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.Product", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("WebCommerce.Web.Web.Entities.UserAccount", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
